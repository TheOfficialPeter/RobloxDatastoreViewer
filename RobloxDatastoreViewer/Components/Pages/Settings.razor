@page "/settings"

<h3 class="mb-2">Settings</h3>
<hr/>

<h5>Connect Roblox Datastore</h5>
<hr width="50px" />

@if (!string.IsNullOrEmpty(_savedDatastoreName))
{
	<h1 class="datastoreName">@_savedDatastoreName</h1><button class="btn btn-danger" @onclick="Disconnect">Disconnect</button>
}
else 
{
	<div id="usernameSearch">
		<div class="inputGroup">
			<input type="text" class="mb-2 form-control" placeholder="Enter your Roblox Username" @bind="_username" />

			@if (_usernameStatus == "loading")
			{
				<div class="spinner-border text-secondary" role="status"></div>
			}
			else if (_usernameStatus == "error")
			{
				<i class="bi bi-x-lg text-danger"></i>
			}
			else if (_usernameStatus == "success")
			{
				<i class="bi bi-check-lg text-success"></i>
			}
		</div>

		@if (_places?.Count > 0)
		{
			<div class="inputGroupSelect">
				<select @bind="_universeId" class="form-select" aria-label="Place Selector">
					<option selected disabled>Please pick a place</option>
					@foreach (var place in _places ?? [])
					{
						<option value="@place.id">@place.name - @place.rootPlace.id</option>
					}
				</select>

				<i class="bi bi-exclamation-triangle" data-bs-toggle="tooltip" data-bs-placement="left" title="The list only contains public Places"></i>
			</div>

			<div class="inputGroup">
				<input type="text" class="mb-2 form-control" placeholder="Enter your Cloud API Key" @bind="_apiKey" />

				<button class="btn btn-primary clipboard-btn" @onclick="FetchFromClipboard"><i class="bi bi-clipboard"></i></button>

				@if (_apiKeyStatus == "loading")
				{
					<div class="spinner-border text-secondary" role="status"></div>
				}
				else if (_apiKeyStatus == "error")
				{
					<i class="bi bi-x-lg text-danger"></i>
				}
				else if (_apiKeyStatus == "success")
				{
					<i class="bi bi-check-lg text-success"></i>
				}
			</div>
		}

		@if (_datastores?.Count > 0)
		{
			<div class="inputGroupSelect">
				<select class="form-select" aria-label="Datastore Selector" @onchange="SaveDatastoreName">
					<option selected disabled>Please pick a Datastore to use</option>
					@foreach (var datastore in _datastores ?? [])
					{
						<option value="@datastore.id">@datastore.path</option>
					}
				</select>
			</div>
		}

		<button class="btn btn-primary" @onclick="ButtonAction">@_buttonText</button>
	</div>
}

@code {
	private string? _usernameStatus = "nothing";
	private string? _apiKeyStatus = "nothing";
	private string? _username;
	private string _buttonText = "Find User";
	private string? _universeId;
	private string? _userId;
	private string? _datastoreId;
	private string? _apiKey;
	private List<GameData>? _places;
	private List<Datastore>? _datastores;
	private string? _savedDatastoreName;
	private string? _datastoreName;

	protected override async Task OnInitializedAsync()
	{
		_userId = await SecureStorage.GetAsync("userId");
		_universeId = await SecureStorage.GetAsync("universeId");
		_apiKey = await SecureStorage.GetAsync("apikey");
		_datastoreId = await SecureStorage.GetAsync("datastoreId");
		_savedDatastoreName = await SecureStorage.GetAsync("datastoreName");
	}

	private void SaveDatastoreName(ChangeEventArgs e)
	{
		if (_datastores != null && e.Value != null)
		{
			_datastoreId = e.Value.ToString();
			_datastoreName = _datastores.Find(x => x.id == e.Value.ToString())?.path;
		}
	}

	private void Disconnect()
	{
		_datastoreName = "";
		_savedDatastoreName = "";
		SecureStorage.RemoveAll();
	}

	private async Task FetchFromClipboard()
	{
		if (Clipboard.Default.HasText)
		{
			_apiKey = await Clipboard.Default.GetTextAsync();
			await Clipboard.Default.SetTextAsync(null);
		}
		return;
	}

	private async Task FetchDatastores()
	{
		if (!string.IsNullOrEmpty(_apiKey) && !string.IsNullOrEmpty(_universeId))
		{
			using (var client = new HttpClient())
			{
				var url = $"https://apis.roblox.com/cloud/v2/universes/{_universeId}/data-stores?maxPageSize=10";
				client.DefaultRequestHeaders.Add("x-api-key", _apiKey);
				DatastoreResponse response;

				try
				{
					response = await client.GetFromJsonAsync<DatastoreResponse>(url) ?? new DatastoreResponse();
				}
				catch
				{
					_apiKeyStatus = "error";
					return;
				}

				if (response?.dataStores?.Count > 0)
				{
					_apiKeyStatus = "success";
					_datastores = response.dataStores;
					_buttonText = "Connect Datastore";
				}
				else
				{
					_apiKeyStatus = "error";
				}
			}
		}
	}

	private async Task FetchPlaces()
	{
		if (!string.IsNullOrEmpty(_userId))
		{
			using (var client = new HttpClient())
			{
				var url = $"https://games.roblox.com/v2/users/{_userId}/games";
				var response = await client.GetFromJsonAsync<GameRoot>(url);

				if (response?.data.Count > 0)
				{
					_places = response.data;
					_buttonText = "Find Datastores";
				}
			}
		}
	}

	private async Task ButtonAction()
	{
		switch(_buttonText)
		{
			case "Find User":
				if (!string.IsNullOrEmpty(_username))
				{
					_usernameStatus = "loading";

					using (var client = new HttpClient())
					{
						const string url = "https://users.roblox.com/v1/usernames/users";
						var content = new UserRequest { usernames = [_username], excludeBannedUsers = true };
						var response = await client.PostAsJsonAsync<UserRequest>(url, content);

						if (response.IsSuccessStatusCode)
						{
							var user = await response.Content.ReadFromJsonAsync<UserResponse>();

							if (user?.data.Count > 0)
							{
								_usernameStatus = "success";
								_buttonText = "Find Place";
								_userId = user.data[0].id.ToString();
								await FetchPlaces();
							}
							else
							{
								_usernameStatus = "error";
							}
						}
						else
						{
							_usernameStatus = "error";
						}
					}
				}
				break;
			case "Find Datastores":
				if (!string.IsNullOrEmpty(_apiKey) && !string.IsNullOrEmpty(_universeId))
				{
					_apiKeyStatus = "loading";
					await FetchDatastores();
				}
				break;
			case "Connect Datastore":
				await SecureStorage.SetAsync("userId", _userId ?? "");
				await SecureStorage.SetAsync("universeId", _universeId ?? "");
				await SecureStorage.SetAsync("apikey", _apiKey ?? "");
				await SecureStorage.SetAsync("datastoreId", _datastoreId ?? "");
				await SecureStorage.SetAsync("datastoreName", _datastoreName ?? "");

				_savedDatastoreName = _datastoreName;
				break;
		}
	}
}
